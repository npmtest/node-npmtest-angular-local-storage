{"/home/travis/build/npmtest/node-npmtest-angular-local-storage/test.js":"/* istanbul instrument in package npmtest_angular_local_storage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-local-storage/lib.npmtest_angular_local_storage.js":"/* istanbul instrument in package npmtest_angular_local_storage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_angular_local_storage = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_angular_local_storage = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-local-storage/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-angular-local-storage && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_angular_local_storage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_angular_local_storage\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_angular_local_storage.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_angular_local_storage.rollup.js'] =\n            local.assetsDict['/assets.npmtest_angular_local_storage.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_angular_local_storage.__dirname +\n                    '/lib.npmtest_angular_local_storage.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-local-storage/node_modules/angular-local-storage/index.js":"require('./dist/angular-local-storage.js');\nmodule.exports = 'LocalStorageModule';\n","/home/travis/build/npmtest/node-npmtest-angular-local-storage/node_modules/angular-local-storage/dist/angular-local-storage.js":"/**\n * An Angular module that gives you access to the browsers local storage\n * @version v0.5.2 - 2016-09-28\n * @link https://github.com/grevory/angular-local-storage\n * @author grevory <greg@gregpike.ca>\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n(function (window, angular) {\nvar isDefined = angular.isDefined,\n  isUndefined = angular.isUndefined,\n  isNumber = angular.isNumber,\n  isObject = angular.isObject,\n  isArray = angular.isArray,\n  isString = angular.isString,\n  extend = angular.extend,\n  toJson = angular.toJson;\n\nangular\n  .module('LocalStorageModule', [])\n  .provider('localStorageService', function() {\n    // You should set a prefix to avoid overwriting any local storage variables from the rest of your app\n    // e.g. localStorageServiceProvider.setPrefix('yourAppName');\n    // With provider you can use config as this:\n    // myApp.config(function (localStorageServiceProvider) {\n    //    localStorageServiceProvider.prefix = 'yourAppName';\n    // });\n    this.prefix = 'ls';\n\n    // You could change web storage type localstorage or sessionStorage\n    this.storageType = 'localStorage';\n\n    // Cookie options (usually in case of fallback)\n    // expiry = Number of days before cookies expire // 0 = Does not expire\n    // path = The web path the cookie represents\n    // secure = Wether the cookies should be secure (i.e only sent on HTTPS requests)\n    this.cookie = {\n      expiry: 30,\n      path: '/',\n      secure: false\n    };\n\n    // Decides wether we should default to cookies if localstorage is not supported.\n    this.defaultToCookie = true;\n\n    // Send signals for each of the following actions?\n    this.notify = {\n      setItem: true,\n      removeItem: false\n    };\n\n    // Setter for the prefix\n    this.setPrefix = function(prefix) {\n      this.prefix = prefix;\n      return this;\n    };\n\n    // Setter for the storageType\n    this.setStorageType = function(storageType) {\n      this.storageType = storageType;\n      return this;\n    };\n    // Setter for defaultToCookie value, default is true.\n    this.setDefaultToCookie = function (shouldDefault) {\n      this.defaultToCookie = !!shouldDefault; // Double-not to make sure it's a bool value.\n      return this;\n    };\n    // Setter for cookie config\n    this.setStorageCookie = function(exp, path, secure) {\n      this.cookie.expiry = exp;\n      this.cookie.path = path;\n      this.cookie.secure = secure;\n      return this;\n    };\n\n    // Setter for cookie domain\n    this.setStorageCookieDomain = function(domain) {\n      this.cookie.domain = domain;\n      return this;\n    };\n\n    // Setter for notification config\n    // itemSet & itemRemove should be booleans\n    this.setNotify = function(itemSet, itemRemove) {\n      this.notify = {\n        setItem: itemSet,\n        removeItem: itemRemove\n      };\n      return this;\n    };\n\n    this.$get = ['$rootScope', '$window', '$document', '$parse','$timeout', function($rootScope, $window, $document, $parse, $timeout) {\n      var self = this;\n      var prefix = self.prefix;\n      var cookie = self.cookie;\n      var notify = self.notify;\n      var storageType = self.storageType;\n      var webStorage;\n\n      // When Angular's $document is not available\n      if (!$document) {\n        $document = document;\n      } else if ($document[0]) {\n        $document = $document[0];\n      }\n\n      // If there is a prefix set in the config lets use that with an appended period for readability\n      if (prefix.substr(-1) !== '.') {\n        prefix = !!prefix ? prefix + '.' : '';\n      }\n      var deriveQualifiedKey = function(key) {\n        return prefix + key;\n      };\n\n      // Removes prefix from the key.\n      var underiveQualifiedKey = function (key) {\n        return key.replace(new RegExp('^' + prefix, 'g'), '');\n      };\n\n      // Check if the key is within our prefix namespace.\n      var isKeyPrefixOurs = function (key) {\n        return key.indexOf(prefix) === 0;\n      };\n\n      // Checks the browser to see if local storage is supported\n      var checkSupport = function () {\n        try {\n          var supported = (storageType in $window && $window[storageType] !== null);\n\n          // When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage\n          // is available, but trying to call .setItem throws an exception.\n          //\n          // \"QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made to add something to storage\n          // that exceeded the quota.\"\n          var key = deriveQualifiedKey('__' + Math.round(Math.random() * 1e7));\n          if (supported) {\n            webStorage = $window[storageType];\n            webStorage.setItem(key, '');\n            webStorage.removeItem(key);\n          }\n\n          return supported;\n        } catch (e) {\n          // Only change storageType to cookies if defaulting is enabled.\n          if (self.defaultToCookie)\n            storageType = 'cookie';\n          $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);\n          return false;\n        }\n      };\n      var browserSupportsLocalStorage = checkSupport();\n\n      // Directly adds a value to local storage\n      // If local storage is not available in the browser use cookies\n      // Example use: localStorageService.add('library','angular');\n      var addToLocalStorage = function (key, value, type) {\n        setStorageType(type);\n\n        // Let's convert undefined values to null to get the value consistent\n        if (isUndefined(value)) {\n          value = null;\n        } else {\n          value = toJson(value);\n        }\n\n        // If this browser does not support local storage use cookies\n        if (!browserSupportsLocalStorage && self.defaultToCookie || self.storageType === 'cookie') {\n          if (!browserSupportsLocalStorage) {\n            $rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');\n          }\n\n          if (notify.setItem) {\n            $rootScope.$broadcast('LocalStorageModule.notification.setitem', {key: key, newvalue: value, storageType: 'cookie'});\n          }\n          return addToCookies(key, value);\n        }\n\n        try {\n          if (webStorage) {\n            webStorage.setItem(deriveQualifiedKey(key), value);\n          }\n          if (notify.setItem) {\n            $rootScope.$broadcast('LocalStorageModule.notification.setitem', {key: key, newvalue: value, storageType: self.storageType});\n          }\n        } catch (e) {\n          $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);\n          return addToCookies(key, value);\n        }\n        return true;\n      };\n\n      // Directly get a value from local storage\n      // Example use: localStorageService.get('library'); // returns 'angular'\n      var getFromLocalStorage = function (key, type) {\n        setStorageType(type);\n\n        if (!browserSupportsLocalStorage && self.defaultToCookie  || self.storageType === 'cookie') {\n          if (!browserSupportsLocalStorage) {\n            $rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');\n          }\n\n          return getFromCookies(key);\n        }\n\n        var item = webStorage ? webStorage.getItem(deriveQualifiedKey(key)) : null;\n        // angular.toJson will convert null to 'null', so a proper conversion is needed\n        // FIXME not a perfect solution, since a valid 'null' string can't be stored\n        if (!item || item === 'null') {\n          return null;\n        }\n\n        try {\n          return JSON.parse(item);\n        } catch (e) {\n          return item;\n        }\n      };\n\n      // Remove an item from local storage\n      // Example use: localStorageService.remove('library'); // removes the key/value pair of library='angular'\n      //\n      // This is var-arg removal, check the last argument to see if it is a storageType\n      // and set type accordingly before removing.\n      //\n      var removeFromLocalStorage = function () {\n        // can't pop on arguments, so we do this\n        var consumed = 0;\n        if (arguments.length >= 1 &&\n            (arguments[arguments.length - 1] === 'localStorage' ||\n             arguments[arguments.length - 1] === 'sessionStorage')) {\n          consumed = 1;\n          setStorageType(arguments[arguments.length - 1]);\n        }\n\n        var i, key;\n        for (i = 0; i < arguments.length - consumed; i++) {\n          key = arguments[i];\n          if (!browserSupportsLocalStorage && self.defaultToCookie || self.storageType === 'cookie') {\n            if (!browserSupportsLocalStorage) {\n              $rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');\n            }\n\n            if (notify.removeItem) {\n              $rootScope.$broadcast('LocalStorageModule.notification.removeitem', {key: key, storageType: 'cookie'});\n            }\n            removeFromCookies(key);\n          }\n          else {\n            try {\n              webStorage.removeItem(deriveQualifiedKey(key));\n              if (notify.removeItem) {\n                $rootScope.$broadcast('LocalStorageModule.notification.removeitem', {\n                  key: key,\n                  storageType: self.storageType\n                });\n              }\n            } catch (e) {\n              $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);\n              removeFromCookies(key);\n            }\n          }\n        }\n      };\n\n      // Return array of keys for local storage\n      // Example use: var keys = localStorageService.keys()\n      var getKeysForLocalStorage = function (type) {\n        setStorageType(type);\n\n        if (!browserSupportsLocalStorage) {\n          $rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');\n          return [];\n        }\n\n        var prefixLength = prefix.length;\n        var keys = [];\n        for (var key in webStorage) {\n          // Only return keys that are for this app\n          if (key.substr(0, prefixLength) === prefix) {\n            try {\n              keys.push(key.substr(prefixLength));\n            } catch (e) {\n              $rootScope.$broadcast('LocalStorageModule.notification.error', e.Description);\n              return [];\n            }\n          }\n        }\n        return keys;\n      };\n\n      // Remove all data for this app from local storage\n      // Also optionally takes a regular expression string and removes the matching key-value pairs\n      // Example use: localStorageService.clearAll();\n      // Should be used mostly for development purposes\n      var clearAllFromLocalStorage = function (regularExpression, type) {\n        setStorageType(type);\n\n        // Setting both regular expressions independently\n        // Empty strings result in catchall RegExp\n        var prefixRegex = !!prefix ? new RegExp('^' + prefix) : new RegExp();\n        var testRegex = !!regularExpression ? new RegExp(regularExpression) : new RegExp();\n\n        if (!browserSupportsLocalStorage && self.defaultToCookie  || self.storageType === 'cookie') {\n          if (!browserSupportsLocalStorage) {\n            $rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');\n          }\n          return clearAllFromCookies();\n        }\n        if (!browserSupportsLocalStorage && !self.defaultToCookie)\n          return false;\n        var prefixLength = prefix.length;\n\n        for (var key in webStorage) {\n          // Only remove items that are for this app and match the regular expression\n          if (prefixRegex.test(key) && testRegex.test(key.substr(prefixLength))) {\n            try {\n              removeFromLocalStorage(key.substr(prefixLength));\n            } catch (e) {\n              $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);\n              return clearAllFromCookies();\n            }\n          }\n        }\n        return true;\n      };\n\n      // Checks the browser to see if cookies are supported\n      var browserSupportsCookies = (function() {\n        try {\n          return $window.navigator.cookieEnabled ||\n          (\"cookie\" in $document && ($document.cookie.length > 0 ||\n            ($document.cookie = \"test\").indexOf.call($document.cookie, \"test\") > -1));\n          } catch (e) {\n            $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);\n            return false;\n          }\n        }());\n\n        // Directly adds a value to cookies\n        // Typically used as a fallback if local storage is not available in the browser\n        // Example use: localStorageService.cookie.add('library','angular');\n        var addToCookies = function (key, value, daysToExpiry, secure) {\n\n          if (isUndefined(value)) {\n            return false;\n          } else if(isArray(value) || isObject(value)) {\n            value = toJson(value);\n          }\n\n          if (!browserSupportsCookies) {\n            $rootScope.$broadcast('LocalStorageModule.notification.error', 'COOKIES_NOT_SUPPORTED');\n            return false;\n          }\n\n          try {\n            var expiry = '',\n            expiryDate = new Date(),\n            cookieDomain = '';\n\n            if (value === null) {\n              // Mark that the cookie has expired one day ago\n              expiryDate.setTime(expiryDate.getTime() + (-1 * 24 * 60 * 60 * 1000));\n              expiry = \"; expires=\" + expiryDate.toGMTString();\n              value = '';\n            } else if (isNumber(daysToExpiry) && daysToExpiry !== 0) {\n              expiryDate.setTime(expiryDate.getTime() + (daysToExpiry * 24 * 60 * 60 * 1000));\n              expiry = \"; expires=\" + expiryDate.toGMTString();\n            } else if (cookie.expiry !== 0) {\n              expiryDate.setTime(expiryDate.getTime() + (cookie.expiry * 24 * 60 * 60 * 1000));\n              expiry = \"; expires=\" + expiryDate.toGMTString();\n            }\n            if (!!key) {\n              var cookiePath = \"; path=\" + cookie.path;\n              if (cookie.domain) {\n                cookieDomain = \"; domain=\" + cookie.domain;\n              }\n              /* Providing the secure parameter always takes precedence over config\n               * (allows developer to mix and match secure + non-secure) */\n              if (typeof secure === 'boolean') {\n                  if (secure === true) {\n                      /* We've explicitly specified secure,\n                       * add the secure attribute to the cookie (after domain) */\n                      cookieDomain += \"; secure\";\n                  }\n                  // else - secure has been supplied but isn't true - so don't set secure flag, regardless of what config says\n              }\n              else if (cookie.secure === true) {\n                  // secure parameter wasn't specified, get default from config\n                  cookieDomain += \"; secure\";\n              }\n              $document.cookie = deriveQualifiedKey(key) + \"=\" + encodeURIComponent(value) + expiry + cookiePath + cookieDomain;\n            }\n          } catch (e) {\n            $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);\n            return false;\n          }\n          return true;\n        };\n\n        // Directly get a value from a cookie\n        // Example use: localStorageService.cookie.get('library'); // returns 'angular'\n        var getFromCookies = function (key) {\n          if (!browserSupportsCookies) {\n            $rootScope.$broadcast('LocalStorageModule.notification.error', 'COOKIES_NOT_SUPPORTED');\n            return false;\n          }\n\n          var cookies = $document.cookie && $document.cookie.split(';') || [];\n          for(var i=0; i < cookies.length; i++) {\n            var thisCookie = cookies[i];\n            while (thisCookie.charAt(0) === ' ') {\n              thisCookie = thisCookie.substring(1,thisCookie.length);\n            }\n            if (thisCookie.indexOf(deriveQualifiedKey(key) + '=') === 0) {\n              var storedValues = decodeURIComponent(thisCookie.substring(prefix.length + key.length + 1, thisCookie.length));\n              try {\n                var parsedValue = JSON.parse(storedValues);\n                return typeof(parsedValue) === 'number' ? storedValues : parsedValue;\n              } catch(e) {\n                return storedValues;\n              }\n            }\n          }\n          return null;\n        };\n\n        var removeFromCookies = function (key) {\n          addToCookies(key,null);\n        };\n\n        var clearAllFromCookies = function () {\n          var thisCookie = null;\n          var prefixLength = prefix.length;\n          var cookies = $document.cookie.split(';');\n          for(var i = 0; i < cookies.length; i++) {\n            thisCookie = cookies[i];\n\n            while (thisCookie.charAt(0) === ' ') {\n              thisCookie = thisCookie.substring(1, thisCookie.length);\n            }\n\n            var key = thisCookie.substring(prefixLength, thisCookie.indexOf('='));\n            removeFromCookies(key);\n          }\n        };\n\n        var getStorageType = function() {\n          return storageType;\n        };\n\n        var setStorageType = function(type) {\n          if (type && storageType !== type) {\n            storageType = type;\n            browserSupportsLocalStorage = checkSupport();\n          }\n          return browserSupportsLocalStorage;\n        };\n\n        // Add a listener on scope variable to save its changes to local storage\n        // Return a function which when called cancels binding\n        var bindToScope = function(scope, key, def, lsKey, type) {\n          lsKey = lsKey || key;\n          var value = getFromLocalStorage(lsKey, type);\n\n          if (value === null && isDefined(def)) {\n            value = def;\n          } else if (isObject(value) && isObject(def)) {\n            value = extend(value, def);\n          }\n\n          $parse(key).assign(scope, value);\n\n          return scope.$watch(key, function(newVal) {\n            addToLocalStorage(lsKey, newVal, type);\n          }, isObject(scope[key]));\n        };\n\n        // Add listener to local storage, for update callbacks.\n        if (browserSupportsLocalStorage) {\n            if ($window.addEventListener) {\n                $window.addEventListener(\"storage\", handleStorageChangeCallback, false);\n                $rootScope.$on('$destroy', function() {\n                    $window.removeEventListener(\"storage\", handleStorageChangeCallback);\n                });\n            } else if($window.attachEvent){\n                // attachEvent and detachEvent are proprietary to IE v6-10\n                $window.attachEvent(\"onstorage\", handleStorageChangeCallback);\n                $rootScope.$on('$destroy', function() {\n                    $window.detachEvent(\"onstorage\", handleStorageChangeCallback);\n                });\n            }\n        }\n\n        // Callback handler for storage changed.\n        function handleStorageChangeCallback(e) {\n            if (!e) { e = $window.event; }\n            if (notify.setItem) {\n                if (isString(e.key) && isKeyPrefixOurs(e.key)) {\n                    var key = underiveQualifiedKey(e.key);\n                    // Use timeout, to avoid using $rootScope.$apply.\n                    $timeout(function () {\n                        $rootScope.$broadcast('LocalStorageModule.notification.changed', { key: key, newvalue: e.newValue, storageType: self.storageType });\n                    });\n                }\n            }\n        }\n\n        // Return localStorageService.length\n        // ignore keys that not owned\n        var lengthOfLocalStorage = function(type) {\n          setStorageType(type);\n\n          var count = 0;\n          var storage = $window[storageType];\n          for(var i = 0; i < storage.length; i++) {\n            if(storage.key(i).indexOf(prefix) === 0 ) {\n              count++;\n            }\n          }\n          return count;\n        };\n\n        return {\n          isSupported: browserSupportsLocalStorage,\n          getStorageType: getStorageType,\n          setStorageType: setStorageType,\n          set: addToLocalStorage,\n          add: addToLocalStorage, //DEPRECATED\n          get: getFromLocalStorage,\n          keys: getKeysForLocalStorage,\n          remove: removeFromLocalStorage,\n          clearAll: clearAllFromLocalStorage,\n          bind: bindToScope,\n          deriveKey: deriveQualifiedKey,\n          underiveKey: underiveQualifiedKey,\n          length: lengthOfLocalStorage,\n          defaultToCookie: this.defaultToCookie,\n          cookie: {\n            isSupported: browserSupportsCookies,\n            set: addToCookies,\n            add: addToCookies, //DEPRECATED\n            get: getFromCookies,\n            remove: removeFromCookies,\n            clearAll: clearAllFromCookies\n          }\n        };\n      }];\n  });\n})(window, window.angular);","/home/travis/build/npmtest/node-npmtest-angular-local-storage/node_modules/angular-local-storage/Gruntfile.js":"module.exports = function(grunt) {\n  'use strict';\n\n  // Load the grunt tasks\n  require('load-grunt-tasks')(grunt);\n\n  // Time the grunt tasks\n  require('time-grunt')(grunt);\n\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    meta: {\n      banner: [\n        '/**',\n        ' * <%= pkg.description %>',\n        ' * @version v<%= pkg.version %> - <%= grunt.template.today(\"yyyy-mm-dd\") %>',\n        ' * @link <%= pkg.homepage %>',\n        ' * @author <%= pkg.author %>',\n        ' * @license MIT License, http://www.opensource.org/licenses/MIT',\n        ' */'\n      ].join('\\n')\n    },\n    dirs: {\n      dest: 'dist'\n    },\n    concat: {\n      options: {\n        banner: '<%= meta.banner %>' + '\\n' +\n          '(function (window, angular) {\\n',\n        footer: '})(window, window.angular);'\n      },\n      dist: {\n        src: ['src/angular-local-storage.js'],\n        dest: '<%= dirs.dest %>/<%= pkg.name %>.js'\n      }\n    },\n    uglify: {\n      options: {\n        banner: '<%= meta.banner %>',\n        sourceMap: true\n      },\n      dist: {\n        src: ['<%= concat.dist.dest %>'],\n        dest: '<%= dirs.dest %>/<%= pkg.name %>.min.js'\n      }\n    },\n    karma: {\n      options: {\n        autowatch: true,\n        configFile: 'test/karma.conf.js'\n      },\n      unit: {}\n    },\n    jshint: {\n      grunt: {\n        src: ['Gruntfile.js'],\n        options: {\n          node: true\n        }\n      },\n      dev: {\n        src: ['angular-local-storage.js'],\n        options: {}\n      },\n      test: {\n        src: ['test/spec/**/*.js'],\n        options: {\n          jshintrc: 'test/.jshintrc',\n        }\n      }\n    }\n  });\n\n  grunt.registerTask('test', [\n    'concat',\n    'karma'\n  ]);\n\n  grunt.registerTask('default', [\n    'jshint',\n    'test'\n  ]);\n\n  grunt.registerTask('dist', [\n    'concat',\n    'uglify'\n  ]);\n};\n","/home/travis/build/npmtest/node-npmtest-angular-local-storage/node_modules/angular-local-storage/demo/demo-app.js":"'use strict';\nwindow.angular.module('demoModule', ['LocalStorageModule'])\n.config(function(localStorageServiceProvider){\n  localStorageServiceProvider.setPrefix('demoPrefix');\n  // localStorageServiceProvider.setStorageCookieDomain('example.com');\n  // localStorageServiceProvider.setStorageType('sessionStorage');\n})\n.controller('DemoCtrl',\n  function($scope, localStorageService) {\n    $scope.localStorageDemo = localStorageService.get('localStorageDemo');\n\n    $scope.$watch('localStorageDemo', function(value){\n      localStorageService.set('localStorageDemo',value);\n      $scope.localStorageDemoValue = localStorageService.get('localStorageDemo');\n    });\n\n    $scope.storageType = 'Local storage';\n\n    if (localStorageService.getStorageType().indexOf('session') >= 0) {\n      $scope.storageType = 'Session storage';\n    }\n\n    if (!localStorageService.isSupported) {\n      $scope.storageType = 'Cookie';\n    }\n\n    $scope.$watch(function(){\n      return localStorageService.get('localStorageDemo');\n    }, function(value){\n      $scope.localStorageDemo = value;\n    });\n\n    $scope.clearAll = localStorageService.clearAll;\n  }\n);\n","/home/travis/build/npmtest/node-npmtest-angular-local-storage/node_modules/angular-local-storage/src/angular-local-storage.js":"var isDefined = angular.isDefined,\n  isUndefined = angular.isUndefined,\n  isNumber = angular.isNumber,\n  isObject = angular.isObject,\n  isArray = angular.isArray,\n  isString = angular.isString,\n  extend = angular.extend,\n  toJson = angular.toJson;\n\nangular\n  .module('LocalStorageModule', [])\n  .provider('localStorageService', function() {\n    // You should set a prefix to avoid overwriting any local storage variables from the rest of your app\n    // e.g. localStorageServiceProvider.setPrefix('yourAppName');\n    // With provider you can use config as this:\n    // myApp.config(function (localStorageServiceProvider) {\n    //    localStorageServiceProvider.prefix = 'yourAppName';\n    // });\n    this.prefix = 'ls';\n\n    // You could change web storage type localstorage or sessionStorage\n    this.storageType = 'localStorage';\n\n    // Cookie options (usually in case of fallback)\n    // expiry = Number of days before cookies expire // 0 = Does not expire\n    // path = The web path the cookie represents\n    // secure = Wether the cookies should be secure (i.e only sent on HTTPS requests)\n    this.cookie = {\n      expiry: 30,\n      path: '/',\n      secure: false\n    };\n\n    // Decides wether we should default to cookies if localstorage is not supported.\n    this.defaultToCookie = true;\n\n    // Send signals for each of the following actions?\n    this.notify = {\n      setItem: true,\n      removeItem: false\n    };\n\n    // Setter for the prefix\n    this.setPrefix = function(prefix) {\n      this.prefix = prefix;\n      return this;\n    };\n\n    // Setter for the storageType\n    this.setStorageType = function(storageType) {\n      this.storageType = storageType;\n      return this;\n    };\n    // Setter for defaultToCookie value, default is true.\n    this.setDefaultToCookie = function (shouldDefault) {\n      this.defaultToCookie = !!shouldDefault; // Double-not to make sure it's a bool value.\n      return this;\n    };\n    // Setter for cookie config\n    this.setStorageCookie = function(exp, path, secure) {\n      this.cookie.expiry = exp;\n      this.cookie.path = path;\n      this.cookie.secure = secure;\n      return this;\n    };\n\n    // Setter for cookie domain\n    this.setStorageCookieDomain = function(domain) {\n      this.cookie.domain = domain;\n      return this;\n    };\n\n    // Setter for notification config\n    // itemSet & itemRemove should be booleans\n    this.setNotify = function(itemSet, itemRemove) {\n      this.notify = {\n        setItem: itemSet,\n        removeItem: itemRemove\n      };\n      return this;\n    };\n\n    this.$get = ['$rootScope', '$window', '$document', '$parse','$timeout', function($rootScope, $window, $document, $parse, $timeout) {\n      var self = this;\n      var prefix = self.prefix;\n      var cookie = self.cookie;\n      var notify = self.notify;\n      var storageType = self.storageType;\n      var webStorage;\n\n      // When Angular's $document is not available\n      if (!$document) {\n        $document = document;\n      } else if ($document[0]) {\n        $document = $document[0];\n      }\n\n      // If there is a prefix set in the config lets use that with an appended period for readability\n      if (prefix.substr(-1) !== '.') {\n        prefix = !!prefix ? prefix + '.' : '';\n      }\n      var deriveQualifiedKey = function(key) {\n        return prefix + key;\n      };\n\n      // Removes prefix from the key.\n      var underiveQualifiedKey = function (key) {\n        return key.replace(new RegExp('^' + prefix, 'g'), '');\n      };\n\n      // Check if the key is within our prefix namespace.\n      var isKeyPrefixOurs = function (key) {\n        return key.indexOf(prefix) === 0;\n      };\n\n      // Checks the browser to see if local storage is supported\n      var checkSupport = function () {\n        try {\n          var supported = (storageType in $window && $window[storageType] !== null);\n\n          // When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage\n          // is available, but trying to call .setItem throws an exception.\n          //\n          // \"QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made to add something to storage\n          // that exceeded the quota.\"\n          var key = deriveQualifiedKey('__' + Math.round(Math.random() * 1e7));\n          if (supported) {\n            webStorage = $window[storageType];\n            webStorage.setItem(key, '');\n            webStorage.removeItem(key);\n          }\n\n          return supported;\n        } catch (e) {\n          // Only change storageType to cookies if defaulting is enabled.\n          if (self.defaultToCookie)\n            storageType = 'cookie';\n          $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);\n          return false;\n        }\n      };\n      var browserSupportsLocalStorage = checkSupport();\n\n      // Directly adds a value to local storage\n      // If local storage is not available in the browser use cookies\n      // Example use: localStorageService.add('library','angular');\n      var addToLocalStorage = function (key, value, type) {\n        setStorageType(type);\n\n        // Let's convert undefined values to null to get the value consistent\n        if (isUndefined(value)) {\n          value = null;\n        } else {\n          value = toJson(value);\n        }\n\n        // If this browser does not support local storage use cookies\n        if (!browserSupportsLocalStorage && self.defaultToCookie || self.storageType === 'cookie') {\n          if (!browserSupportsLocalStorage) {\n            $rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');\n          }\n\n          if (notify.setItem) {\n            $rootScope.$broadcast('LocalStorageModule.notification.setitem', {key: key, newvalue: value, storageType: 'cookie'});\n          }\n          return addToCookies(key, value);\n        }\n\n        try {\n          if (webStorage) {\n            webStorage.setItem(deriveQualifiedKey(key), value);\n          }\n          if (notify.setItem) {\n            $rootScope.$broadcast('LocalStorageModule.notification.setitem', {key: key, newvalue: value, storageType: self.storageType});\n          }\n        } catch (e) {\n          $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);\n          return addToCookies(key, value);\n        }\n        return true;\n      };\n\n      // Directly get a value from local storage\n      // Example use: localStorageService.get('library'); // returns 'angular'\n      var getFromLocalStorage = function (key, type) {\n        setStorageType(type);\n\n        if (!browserSupportsLocalStorage && self.defaultToCookie  || self.storageType === 'cookie') {\n          if (!browserSupportsLocalStorage) {\n            $rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');\n          }\n\n          return getFromCookies(key);\n        }\n\n        var item = webStorage ? webStorage.getItem(deriveQualifiedKey(key)) : null;\n        // angular.toJson will convert null to 'null', so a proper conversion is needed\n        // FIXME not a perfect solution, since a valid 'null' string can't be stored\n        if (!item || item === 'null') {\n          return null;\n        }\n\n        try {\n          return JSON.parse(item);\n        } catch (e) {\n          return item;\n        }\n      };\n\n      // Remove an item from local storage\n      // Example use: localStorageService.remove('library'); // removes the key/value pair of library='angular'\n      //\n      // This is var-arg removal, check the last argument to see if it is a storageType\n      // and set type accordingly before removing.\n      //\n      var removeFromLocalStorage = function () {\n        // can't pop on arguments, so we do this\n        var consumed = 0;\n        if (arguments.length >= 1 &&\n            (arguments[arguments.length - 1] === 'localStorage' ||\n             arguments[arguments.length - 1] === 'sessionStorage')) {\n          consumed = 1;\n          setStorageType(arguments[arguments.length - 1]);\n        }\n\n        var i, key;\n        for (i = 0; i < arguments.length - consumed; i++) {\n          key = arguments[i];\n          if (!browserSupportsLocalStorage && self.defaultToCookie || self.storageType === 'cookie') {\n            if (!browserSupportsLocalStorage) {\n              $rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');\n            }\n\n            if (notify.removeItem) {\n              $rootScope.$broadcast('LocalStorageModule.notification.removeitem', {key: key, storageType: 'cookie'});\n            }\n            removeFromCookies(key);\n          }\n          else {\n            try {\n              webStorage.removeItem(deriveQualifiedKey(key));\n              if (notify.removeItem) {\n                $rootScope.$broadcast('LocalStorageModule.notification.removeitem', {\n                  key: key,\n                  storageType: self.storageType\n                });\n              }\n            } catch (e) {\n              $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);\n              removeFromCookies(key);\n            }\n          }\n        }\n      };\n\n      // Return array of keys for local storage\n      // Example use: var keys = localStorageService.keys()\n      var getKeysForLocalStorage = function (type) {\n        setStorageType(type);\n\n        if (!browserSupportsLocalStorage) {\n          $rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');\n          return [];\n        }\n\n        var prefixLength = prefix.length;\n        var keys = [];\n        for (var key in webStorage) {\n          // Only return keys that are for this app\n          if (key.substr(0, prefixLength) === prefix) {\n            try {\n              keys.push(key.substr(prefixLength));\n            } catch (e) {\n              $rootScope.$broadcast('LocalStorageModule.notification.error', e.Description);\n              return [];\n            }\n          }\n        }\n        return keys;\n      };\n\n      // Remove all data for this app from local storage\n      // Also optionally takes a regular expression string and removes the matching key-value pairs\n      // Example use: localStorageService.clearAll();\n      // Should be used mostly for development purposes\n      var clearAllFromLocalStorage = function (regularExpression, type) {\n        setStorageType(type);\n\n        // Setting both regular expressions independently\n        // Empty strings result in catchall RegExp\n        var prefixRegex = !!prefix ? new RegExp('^' + prefix) : new RegExp();\n        var testRegex = !!regularExpression ? new RegExp(regularExpression) : new RegExp();\n\n        if (!browserSupportsLocalStorage && self.defaultToCookie  || self.storageType === 'cookie') {\n          if (!browserSupportsLocalStorage) {\n            $rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');\n          }\n          return clearAllFromCookies();\n        }\n        if (!browserSupportsLocalStorage && !self.defaultToCookie)\n          return false;\n        var prefixLength = prefix.length;\n\n        for (var key in webStorage) {\n          // Only remove items that are for this app and match the regular expression\n          if (prefixRegex.test(key) && testRegex.test(key.substr(prefixLength))) {\n            try {\n              removeFromLocalStorage(key.substr(prefixLength));\n            } catch (e) {\n              $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);\n              return clearAllFromCookies();\n            }\n          }\n        }\n        return true;\n      };\n\n      // Checks the browser to see if cookies are supported\n      var browserSupportsCookies = (function() {\n        try {\n          return $window.navigator.cookieEnabled ||\n          (\"cookie\" in $document && ($document.cookie.length > 0 ||\n            ($document.cookie = \"test\").indexOf.call($document.cookie, \"test\") > -1));\n          } catch (e) {\n            $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);\n            return false;\n          }\n        }());\n\n        // Directly adds a value to cookies\n        // Typically used as a fallback if local storage is not available in the browser\n        // Example use: localStorageService.cookie.add('library','angular');\n        var addToCookies = function (key, value, daysToExpiry, secure) {\n\n          if (isUndefined(value)) {\n            return false;\n          } else if(isArray(value) || isObject(value)) {\n            value = toJson(value);\n          }\n\n          if (!browserSupportsCookies) {\n            $rootScope.$broadcast('LocalStorageModule.notification.error', 'COOKIES_NOT_SUPPORTED');\n            return false;\n          }\n\n          try {\n            var expiry = '',\n            expiryDate = new Date(),\n            cookieDomain = '';\n\n            if (value === null) {\n              // Mark that the cookie has expired one day ago\n              expiryDate.setTime(expiryDate.getTime() + (-1 * 24 * 60 * 60 * 1000));\n              expiry = \"; expires=\" + expiryDate.toGMTString();\n              value = '';\n            } else if (isNumber(daysToExpiry) && daysToExpiry !== 0) {\n              expiryDate.setTime(expiryDate.getTime() + (daysToExpiry * 24 * 60 * 60 * 1000));\n              expiry = \"; expires=\" + expiryDate.toGMTString();\n            } else if (cookie.expiry !== 0) {\n              expiryDate.setTime(expiryDate.getTime() + (cookie.expiry * 24 * 60 * 60 * 1000));\n              expiry = \"; expires=\" + expiryDate.toGMTString();\n            }\n            if (!!key) {\n              var cookiePath = \"; path=\" + cookie.path;\n              if (cookie.domain) {\n                cookieDomain = \"; domain=\" + cookie.domain;\n              }\n              /* Providing the secure parameter always takes precedence over config\n               * (allows developer to mix and match secure + non-secure) */\n              if (typeof secure === 'boolean') {\n                  if (secure === true) {\n                      /* We've explicitly specified secure,\n                       * add the secure attribute to the cookie (after domain) */\n                      cookieDomain += \"; secure\";\n                  }\n                  // else - secure has been supplied but isn't true - so don't set secure flag, regardless of what config says\n              }\n              else if (cookie.secure === true) {\n                  // secure parameter wasn't specified, get default from config\n                  cookieDomain += \"; secure\";\n              }\n              $document.cookie = deriveQualifiedKey(key) + \"=\" + encodeURIComponent(value) + expiry + cookiePath + cookieDomain;\n            }\n          } catch (e) {\n            $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);\n            return false;\n          }\n          return true;\n        };\n\n        // Directly get a value from a cookie\n        // Example use: localStorageService.cookie.get('library'); // returns 'angular'\n        var getFromCookies = function (key) {\n          if (!browserSupportsCookies) {\n            $rootScope.$broadcast('LocalStorageModule.notification.error', 'COOKIES_NOT_SUPPORTED');\n            return false;\n          }\n\n          var cookies = $document.cookie && $document.cookie.split(';') || [];\n          for(var i=0; i < cookies.length; i++) {\n            var thisCookie = cookies[i];\n            while (thisCookie.charAt(0) === ' ') {\n              thisCookie = thisCookie.substring(1,thisCookie.length);\n            }\n            if (thisCookie.indexOf(deriveQualifiedKey(key) + '=') === 0) {\n              var storedValues = decodeURIComponent(thisCookie.substring(prefix.length + key.length + 1, thisCookie.length));\n              try {\n                var parsedValue = JSON.parse(storedValues);\n                return typeof(parsedValue) === 'number' ? storedValues : parsedValue;\n              } catch(e) {\n                return storedValues;\n              }\n            }\n          }\n          return null;\n        };\n\n        var removeFromCookies = function (key) {\n          addToCookies(key,null);\n        };\n\n        var clearAllFromCookies = function () {\n          var thisCookie = null;\n          var prefixLength = prefix.length;\n          var cookies = $document.cookie.split(';');\n          for(var i = 0; i < cookies.length; i++) {\n            thisCookie = cookies[i];\n\n            while (thisCookie.charAt(0) === ' ') {\n              thisCookie = thisCookie.substring(1, thisCookie.length);\n            }\n\n            var key = thisCookie.substring(prefixLength, thisCookie.indexOf('='));\n            removeFromCookies(key);\n          }\n        };\n\n        var getStorageType = function() {\n          return storageType;\n        };\n\n        var setStorageType = function(type) {\n          if (type && storageType !== type) {\n            storageType = type;\n            browserSupportsLocalStorage = checkSupport();\n          }\n          return browserSupportsLocalStorage;\n        };\n\n        // Add a listener on scope variable to save its changes to local storage\n        // Return a function which when called cancels binding\n        var bindToScope = function(scope, key, def, lsKey, type) {\n          lsKey = lsKey || key;\n          var value = getFromLocalStorage(lsKey, type);\n\n          if (value === null && isDefined(def)) {\n            value = def;\n          } else if (isObject(value) && isObject(def)) {\n            value = extend(value, def);\n          }\n\n          $parse(key).assign(scope, value);\n\n          return scope.$watch(key, function(newVal) {\n            addToLocalStorage(lsKey, newVal, type);\n          }, isObject(scope[key]));\n        };\n\n        // Add listener to local storage, for update callbacks.\n        if (browserSupportsLocalStorage) {\n            if ($window.addEventListener) {\n                $window.addEventListener(\"storage\", handleStorageChangeCallback, false);\n                $rootScope.$on('$destroy', function() {\n                    $window.removeEventListener(\"storage\", handleStorageChangeCallback);\n                });\n            } else if($window.attachEvent){\n                // attachEvent and detachEvent are proprietary to IE v6-10\n                $window.attachEvent(\"onstorage\", handleStorageChangeCallback);\n                $rootScope.$on('$destroy', function() {\n                    $window.detachEvent(\"onstorage\", handleStorageChangeCallback);\n                });\n            }\n        }\n\n        // Callback handler for storage changed.\n        function handleStorageChangeCallback(e) {\n            if (!e) { e = $window.event; }\n            if (notify.setItem) {\n                if (isString(e.key) && isKeyPrefixOurs(e.key)) {\n                    var key = underiveQualifiedKey(e.key);\n                    // Use timeout, to avoid using $rootScope.$apply.\n                    $timeout(function () {\n                        $rootScope.$broadcast('LocalStorageModule.notification.changed', { key: key, newvalue: e.newValue, storageType: self.storageType });\n                    });\n                }\n            }\n        }\n\n        // Return localStorageService.length\n        // ignore keys that not owned\n        var lengthOfLocalStorage = function(type) {\n          setStorageType(type);\n\n          var count = 0;\n          var storage = $window[storageType];\n          for(var i = 0; i < storage.length; i++) {\n            if(storage.key(i).indexOf(prefix) === 0 ) {\n              count++;\n            }\n          }\n          return count;\n        };\n\n        return {\n          isSupported: browserSupportsLocalStorage,\n          getStorageType: getStorageType,\n          setStorageType: setStorageType,\n          set: addToLocalStorage,\n          add: addToLocalStorage, //DEPRECATED\n          get: getFromLocalStorage,\n          keys: getKeysForLocalStorage,\n          remove: removeFromLocalStorage,\n          clearAll: clearAllFromLocalStorage,\n          bind: bindToScope,\n          deriveKey: deriveQualifiedKey,\n          underiveKey: underiveQualifiedKey,\n          length: lengthOfLocalStorage,\n          defaultToCookie: this.defaultToCookie,\n          cookie: {\n            isSupported: browserSupportsCookies,\n            set: addToCookies,\n            add: addToCookies, //DEPRECATED\n            get: getFromCookies,\n            remove: removeFromCookies,\n            clearAll: clearAllFromCookies\n          }\n        };\n      }];\n  });\n"}